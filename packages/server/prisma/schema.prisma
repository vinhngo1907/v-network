generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Supporter {
    id     String @id @default(uuid())
    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Admin {
    id     String @id @default(uuid())
    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Mod {
    id     String @id @default(uuid())
    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Account {
    id          String   @id @default(uuid())
    username    String   @unique @db.VarChar(20)
    password    String   @db.VarChar(200)
    isActivated Boolean  @default(true)
    user        User?
    userId      String?  @db.Uuid
    createdAt   DateTime @default(now())
    createdBy   String   @default("system")
    updatedAt   DateTime @updatedAt
    updatedBy   String   @default("system")
}

model User {
    id          String     @id @default(uuid())
    email       String     @unique @db.VarChar(255)
    fullName    String     @db.VarChar(255)
    username    String     @unique @db.VarChar(255)
    roles       Role[]
    modId       String?
    mod         Mod?
    adminId     String?
    admin       Admin?
    supporterId String?
    supporter   Supporter?

    account   Account @relation(fields: [accountId], references: [id])
    accountId String  @unique

    posts Post[]
    // postId String?

    comments Comment[]
    // commentId String?

    likedPosts    Post[]    @relation("PostLikes")
    likedComments Comment[] @relation("CommentLikes")

    Followers Follow[] @relation("UserFollowers")

    Followings Follow[] @relation("UserFollowings")
}

model Follow {
    id          String @id @default(uuid())
    follower    User   @relation("UserFollowers", fields: [followerId], references: [id])
    followerId  String
    following   User   @relation("UserFollowings", fields: [followingId], references: [id])
    followingId String

    followedAt DateTime @default(now())

    @@unique([followerId, followingId])
}

model Role {
    id        String   @id @default(uuid())
    name      String   @unique @db.VarChar(200)
    users     User[]
    createdAt DateTime @default(now())
    createdBy String   @default("system")
    updatedAt DateTime @updatedAt
    updatedBy String   @default("system")
    isActive  Boolean  @default(true)
}

model Post {
    id       String    @id @default(uuid())
    title    String
    content  String
    likes    User[]    @relation("PostLikes")
    images   Image[]
    comments Comment[]
    User     User      @relation(fields: [userId], references: [id])
    userId   String
}

// model Subtitle {
//     id       String    @id @default(uuid())
//     sublines Subline[]
//     language String
//     // videos   Video[]
//     Video    Video?    @relation(fields: [videoId], references: [id])
//     videoId  String?
// }

// model Subline {
//     id         String    @id @default(uuid())
//     content    String
//     // subtitles Subtitle[]
//     Subtitle   Subtitle? @relation(fields: [subtitleId], references: [id])
//     subtitleId String?
//     timestamp  DateTime  @default(now())
// }

model Comment {
    id      String @id @default(uuid())
    content String
    // commentReactions  CommentReactions[]
    // commentReactionId String
    post    Post   @relation(fields: [postId], references: [id])
    postId  String

    User   User   @relation(fields: [userId], references: [id])
    userId String

    likes User[] @relation("CommentLikes")

    @@map("Comment")
}

// model CommentReactions {
//     id        String   @id @default(uuid())
//     type      String
//     Comment   Comment? @relation(fields: [commentId], references: [id])
//     commentId String?

//     @@map("Comment_Reaction")
// }

// model Video {
//     id          String     @id @default(uuid())
//     title       String     @db.VarChar(300)
//     description String     @db.VarChar(300)
//     thumbnail   String?    @db.VarChar(300)
//     videoUrl    String?    @db.VarChar(300)
//     order       Int        @db.SmallInt
//     subtitles   Subtitle[]
//     Course      Course?    @relation(fields: [courseId], references: [id])
//     courseId    String?
//     publishAt   DateTime   @default(now())

//     @@map("Video")
// }

model Image {
    id     String @id @default(uuid())
    url    String @db.VarChar(400)
    Post   Post   @relation(fields: [postId], references: [id])
    postId String
}

// model Course {
//     id          String  @id @default(uuid())
//     title       String  @db.VarChar(300)
//     description String  @db.VarChar(300)
//     thumbnail   String? @db.VarChar(300)
//     videos      Video[]

//     @@map("Course")
// }

// Define junction table for the many-to-many relationship
// model UserRoles {
//     userId String @unique
//     roleId String @unique

//     user User @relation(fields: [userId], references: [id])
//     role Role @relation(fields: [roleId], references: [id])

//     createdAt DateTime @default(now())
//     createdBy String   @default("system")
//     updatedAt DateTime @updatedAt
//     updatedBy String   @default("system")

//     @@id([userId, roleId])
// }
